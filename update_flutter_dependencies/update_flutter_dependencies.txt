# Define repository details
$repos = @(
    @{ name = "Document_managment"; url = "https://github.com/monodipta09/Document_managment.git" }
)

# Directory to clone the projects
$baseDirectory = "C:\Users\diasa\Desktop\New folder"

# Git package details
$packageName = "menu_submenu_sidebar_dropdown_accordian_package"
$packageGitUrl = "https://github.com/RomanticNihilist/menu_submenu_sidebar_dropdown_accordian_package.git"
$branchOrCommit = "main"

# Function to clear pub cache for the specific Git package
function Clear-PubCacheForGitPackage {
    param ([string]$packageName)

    Write-Host "`n==========================" -ForegroundColor Cyan
    Write-Host "üöÄ Clearing pub cache for package: $packageName..." -ForegroundColor Yellow
    Write-Host "==========================" -ForegroundColor Cyan
    
    $pubCachePath = "$HOME\.pub-cache\git"

    if (Test-Path -Path $pubCachePath) {
        $packageDirectories = Get-ChildItem -Path $pubCachePath -Directory | Where-Object { $_.Name -like "*$packageName*" }

        if ($packageDirectories.Count -gt 0) {
            foreach ($dir in $packageDirectories) {
                Remove-Item -Recurse -Force -Path $dir.FullName
                Write-Host "‚úÖ Removed cached directory: $dir" -ForegroundColor Green
            }
        } else {
            Write-Host "‚ö†Ô∏è No cached directories found for package: $packageName." -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ùå The directory $pubCachePath does not exist. Skipping cache clearing." -ForegroundColor Red
    }
}

# Clear cache for the specific Git package
Clear-PubCacheForGitPackage -packageName $packageName

# Clone the repositories and process them
foreach ($repo in $repos) {
    $repoName = $repo.name
    $repoUrl = $repo.url
    $repoPath = Join-Path $baseDirectory $repoName

    Write-Host "`n==========================" -ForegroundColor Cyan
    Write-Host "üìÇ Processing repository: $repoName" -ForegroundColor Yellow
    Write-Host "==========================" -ForegroundColor Cyan

    # Check if the repo directory already exists
    if (Test-Path -Path $repoPath) {
        Write-Host "üîÑ $repoName already exists. Pulling latest changes..." -ForegroundColor Yellow
        Set-Location -Path $repoPath
        git pull origin main
        Write-Host "‚úÖ Latest changes pulled successfully." -ForegroundColor Green
    } else {
        Write-Host "üõ†Ô∏è Cloning repository: $repoName" -ForegroundColor Yellow
        git clone $repoUrl $repoPath
        Write-Host "‚úÖ Repository cloned successfully!" -ForegroundColor Green
    }

    # Change to project directory
    Set-Location -Path $repoPath

    # Update only the dependency for the specified package in pubspec.yaml
    $pubspecPath = Join-Path $repoPath "pubspec.yaml"
    $pubspecContent = Get-Content $pubspecPath -Raw

    # Use a regex to find and update the Git URL and ref for the specific package
    $regex = "(menu_submenu_sidebar_dropdown_accordian_package:\s*\n\s*git:\s*\n\s*url:\s*).*?(\n\s*ref:\s*).*"
    $replacement = "`$1$packageGitUrl`n      ref: $branchOrCommit"

    # Perform the replacement
    $updatedPubspecContent = $pubspecContent -replace $regex, $replacement

    # Save the updated content back to pubspec.yaml
    Set-Content -Path $pubspecPath -Value $updatedPubspecContent
    Write-Host "‚úÖ Updated package dependency in pubspec.yaml" -ForegroundColor Green

    # Remove .packages and pubspec.lock to force a re-fetch
    Remove-Item -Path "$repoPath\.packages" -ErrorAction SilentlyContinue
    Remove-Item -Path "$repoPath\pubspec.lock" -ErrorAction SilentlyContinue

    # Run flutter pub get
    Write-Host "üì¶ Running flutter pub get..." -ForegroundColor Yellow
    flutter pub get
    Write-Host "‚úÖ Dependencies updated for: $repoName" -ForegroundColor Green

    # Push changes back to GitHub
    Write-Host "üöÄ Pushing changes to GitHub..." -ForegroundColor Yellow
    git add .
    git commit -m "Updated $packageName dependency"
    git push origin master
    Write-Host "‚úÖ Changes pushed to GitHub for $repoName." -ForegroundColor Green
}

Write-Host "`n==========================" -ForegroundColor Cyan
Write-Host "üéâ All projects have been updated and pushed to GitHub!" -ForegroundColor Green
Write-Host "==========================" -ForegroundColor Cyan
